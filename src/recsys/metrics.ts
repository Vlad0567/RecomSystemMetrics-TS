/**
* HitRate (—Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è)
* –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö 
* —Ç–æ–≤–∞—Ä–æ–≤ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
*/
export const calculateHitRate = (
    recommendations: Record<string, string[]>,
    relevantItems: Record<string, string[]>
): number => {
    let hits = 0;
    let total = 0;

    //–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ 
    //–º–µ–∂–¥—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏.
    for (const user in recommendations) {
        const recommended = recommendations[user];
        const relevant = relevantItems[user];
        if (relevant) {
            hits += recommended.some(item => relevant.includes(item)) ? 1 : 0;
            total += 1;
        }
    }
    //–î–µ–ª–∏—Ç—Å—è —á–∏—Å–ª–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π –Ω–∞ –æ–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    return hits / total;
};


/** Precision@K (—Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–æ–ø-K)
* –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ª—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å—Ä–µ–¥–∏ –ø–µ—Ä–≤—ã—Ö ùêæ
* —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
*/
export const calculatePrecisionAtK = (
    recommendations: Record<string, string[]>,
    relevantItems: Record<string, string[]>,
    k: number
): number => {
    let totalPrecision = 0;
    let usersWithRelevantItems = 0;

    //–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Ä—É—Ç—Å—è –ø–µ—Ä–≤—ã–µ K —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.
    for (const user in recommendations) {
        const recommended = recommendations[user].slice(0, k);
        const relevant = relevantItems[user];
        if (relevant) {
            const hits = recommended.filter(item => relevant.includes(item)).length;
            
            //–í—ã—á–∏—Å–ª—è–µ—Ç—Å—è –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —á–∏—Å–ª–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–æ–ø-ùêæ –∫ —á–∏—Å–ª—É ùêæ
            totalPrecision += hits / k;
            usersWithRelevantItems += 1;
        }
    }
    //—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Precision@K –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return usersWithRelevantItems > 0 ? totalPrecision / usersWithRelevantItems : 0;
};

/** Recall@K (–ø–æ–ª–Ω–æ—Ç–∞ –Ω–∞ —Ç–æ–ø-K)
* –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ª—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ –ø–µ—Ä–≤—ã—Ö ùêæ
* —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—Å–µ—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.
*/
export const calculateRecallAtK = (
    recommendations: Record<string, string[]>,
    relevantItems: Record<string, string[]>,
    k: number
): number => {
    let totalRecall = 0;
    let usersWithRelevantItems = 0;

    //–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Ä—É—Ç—Å—è –ø–µ—Ä–≤—ã–µ K —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    for (const user in recommendations) {
        const recommended = recommendations[user].slice(0, k);
        const relevant = relevantItems[user];
        if (relevant) {
            const hits = recommended.filter(item => relevant.includes(item)).length;
            
            //–í—ã—á–∏—Å–ª—è–µ—Ç—Å—è –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —á–∏—Å–ª–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–æ–ø-K –∫ –æ–±—â–µ–º—É —á–∏—Å–ª—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            totalRecall += hits / relevant.length;
            usersWithRelevantItems += 1;
        }
    }
    //—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Recall@K –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return usersWithRelevantItems > 0 ? totalRecall / usersWithRelevantItems : 0;
};

/** MRR (Mean Reciprocal Rank)
* –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–æ –≤ —Å–ø–∏—Å–∫–µ 
* —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–µ—Ä–≤—ã–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä.
*/
export const calculateMRR = (
    recommendations: Record<string, string[]>,
    relevantItems: Record<string, string[]>
): number => {
    let totalMRR = 0;
    let usersWithRelevantItems = 0;

    //–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    for (const user in recommendations) {
        const recommended = recommendations[user];
        const relevant = relevantItems[user];
        if (relevant) {
            const firstRelevantIndex = recommended.findIndex(item => relevant.includes(item));
            if (firstRelevantIndex !== -1) {
                
                //–í—ã—á–∏—Å–ª—è–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ (1/rank)
                totalMRR += 1 / (firstRelevantIndex + 1);
            }
            usersWithRelevantItems += 1;
        }
    }
    
    //—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ MRR –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    return usersWithRelevantItems > 0 ? totalMRR / usersWithRelevantItems : 0;
};
